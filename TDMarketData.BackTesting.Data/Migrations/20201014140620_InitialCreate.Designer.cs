// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TDMarketData.BackTesting.Data;

namespace TDMarketData.BackTesting.Data.Migrations
{
    [DbContext(typeof(BackTestContext))]
    [Migration("20201014140620_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("TDMarketData.BackTesting.Data.Helpers.UnderlyingSymbolPrice", b =>
                {
                    b.Property<string>("UnderlyingPrice")
                        .HasColumnType("text");

                    b.Property<string>("UnderlyingSymbol")
                        .HasColumnType("text");

                    b.ToTable("UnderlyingSymbolPrice");
                });

            modelBuilder.Entity("TDMarketData.BackTesting.Data.Models.OptionCandle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("Ask")
                        .HasColumnType("double precision");

                    b.Property<double>("Bid")
                        .HasColumnType("double precision");

                    b.Property<string>("BidAskSize")
                        .HasColumnType("text");

                    b.Property<double>("Close")
                        .HasColumnType("double precision");

                    b.Property<long>("Datetime")
                        .HasColumnType("bigint");

                    b.Property<long>("OpenInterest")
                        .HasColumnType("bigint");

                    b.Property<int>("OptionContractId")
                        .HasColumnType("integer");

                    b.Property<double>("PercentChange")
                        .HasColumnType("double precision");

                    b.Property<double>("UnderlyingPrice")
                        .HasColumnType("double precision");

                    b.Property<double>("Volatility")
                        .HasColumnType("double precision");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OptionContractId");

                    b.ToTable("OptionCandles");
                });

            modelBuilder.Entity("TDMarketData.BackTesting.Data.Models.OptionContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<char>("CallPut")
                        .HasColumnType("character(1)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("Strike")
                        .HasColumnType("double precision");

                    b.Property<string>("Symbol")
                        .HasColumnType("text");

                    b.Property<string>("UnderlyingSymbol")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OptionContracts");
                });

            modelBuilder.Entity("TDMarketData.BackTesting.Data.Models.OptionSymbolDailyStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CallNotionalValue")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("PutNotionalValue")
                        .HasColumnType("bigint");

                    b.Property<string>("callSizIdx")
                        .HasColumnType("text");

                    b.Property<string>("callVol")
                        .HasColumnType("text");

                    b.Property<string>("hv52High")
                        .HasColumnType("text");

                    b.Property<string>("hv52Low")
                        .HasColumnType("text");

                    b.Property<string>("iv")
                        .HasColumnType("text");

                    b.Property<string>("iv52High")
                        .HasColumnType("text");

                    b.Property<string>("iv52Low")
                        .HasColumnType("text");

                    b.Property<string>("percHV")
                        .HasColumnType("text");

                    b.Property<string>("percIV")
                        .HasColumnType("text");

                    b.Property<string>("putSizIdx")
                        .HasColumnType("text");

                    b.Property<string>("putVol")
                        .HasColumnType("text");

                    b.Property<string>("sizIdx")
                        .HasColumnType("text");

                    b.Property<string>("stSizIdx")
                        .HasColumnType("text");

                    b.Property<string>("symbol")
                        .HasColumnType("text");

                    b.Property<string>("totalVol")
                        .HasColumnType("text");

                    b.Property<string>("volSizIdx")
                        .HasColumnType("text");

                    b.Property<string>("vwap")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DailyStats");
                });

            modelBuilder.Entity("TDMarketData.BackTesting.Data.Models.OptionTimeSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("Ask")
                        .HasColumnType("double precision");

                    b.Property<double>("Bid")
                        .HasColumnType("double precision");

                    b.Property<int>("OptionContractId")
                        .HasColumnType("integer");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("Qty")
                        .HasColumnType("integer");

                    b.Property<long>("Time")
                        .HasColumnType("bigint");

                    b.Property<int>("TradeId")
                        .HasColumnType("integer");

                    b.Property<double>("UnderlyingPrice")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("OptionContractId");

                    b.ToTable("OptionTimeSales");
                });

            modelBuilder.Entity("TDMarketData.BackTesting.Data.Models.Portfolio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Portfolio");
                });

            modelBuilder.Entity("TDMarketData.BackTesting.Data.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("OptionContractId")
                        .HasColumnType("integer");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TradeDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TradeId")
                        .HasColumnType("integer");

                    b.Property<double>("TradePrice")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("OptionContractId");

                    b.HasIndex("PortfolioId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("TDMarketData.BackTesting.Data.Models.OptionCandle", b =>
                {
                    b.HasOne("TDMarketData.BackTesting.Data.Models.OptionContract", "OptionContract")
                        .WithMany("OptionCandles")
                        .HasForeignKey("OptionContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDMarketData.BackTesting.Data.Models.OptionTimeSale", b =>
                {
                    b.HasOne("TDMarketData.BackTesting.Data.Models.OptionContract", "OptionContract")
                        .WithMany()
                        .HasForeignKey("OptionContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TDMarketData.BackTesting.Data.Models.Position", b =>
                {
                    b.HasOne("TDMarketData.BackTesting.Data.Models.OptionContract", "OptionContract")
                        .WithMany()
                        .HasForeignKey("OptionContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDMarketData.BackTesting.Data.Models.Portfolio", "Porfolio")
                        .WithMany("Positions")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
